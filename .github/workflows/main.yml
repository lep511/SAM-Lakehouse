on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build-deploy:
    name: Build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        #uses: actions/checkout@v3
      
      - name: Set up Python Environment
        uses: actions/setup-python@v5
        # uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      
      - name: AWS Actions Setup
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        #uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      # create repo in ECR --
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        #uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: datalake-iceberg
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          echo "Build a docker container and push it to ECR."
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository --repository-name $ECR_REPOSITORY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo ${{ vars.PROD_ENV }}
      
      # create buckets
      - name: Create buckets
        env:
          FOLDER_RAW_BUCKET: icebergdatalake/
        run: |
          echo "Creating sam-bucket..."
          if aws s3api head-bucket --bucket $AWS_BUCKET 2>/dev/null; then echo "Bucket $AWS_BUCKET exist."; else aws s3 mb s3://${{ vars.SAM_BUCKET }} --region ${{ vars.AWS_REGION }} ; fi
          echo "Creating raw bucket if not exist..."
          if aws s3api head-bucket --bucket ${{ vars.RAW_BUCKET }} 2>/dev/null; then echo "Bucket ${{ vars.RAW_BUCKET }} exist."; else aws s3 mb s3://${{ vars.RAW_BUCKET }} --region ${{ vars.AWS_REGION }} ; fi
          echo "Creating stage bucket if not exist..."
          if aws s3api head-bucket --bucket ${{ vars.STAGE_BUCKET }} 2>/dev/null; then echo "Bucket ${{ vars.STAGE_BUCKET }} exist."; else aws s3 mb s3://${{ vars.STAGE_BUCKET }} --region ${{ vars.AWS_REGION }} ; fi
          echo "Enable EventBridge notification..."
          aws s3api put-bucket-notification-configuration --bucket ${{ vars.RAW_BUCKET }} --notification-configuration '{"EventBridgeConfiguration": {}}'
          echo "Enabling versioning on buckets..."
          aws s3api put-bucket-versioning --bucket ${{ vars.RAW_BUCKET }} --versioning-configuration Status=Enabled
          aws s3api put-bucket-versioning --bucket ${{ vars.STAGE_BUCKET }} --versioning-configuration Status=Enabled
          aws s3api put-object --bucket ${{ vars.RAW_BUCKET }} --key $FOLDER_RAW_BUCKET --content-length 0
                
      # sam build
      - name: Build
        run: sam build --beta-features #--use-container

      # Run Unit tests- Specify unit tests here 

      # sam deploy
      - name: Deploy
        env:
          STACK_NAME: datalake-iceberg
        run: sam deploy --no-confirm-changeset 
                        --no-fail-on-empty-changeset 
                        --stack-name $STACK_NAME
                        --s3-bucket ${{ vars.SAM_BUCKET }}
                        --parameter-overrides S3BucketRaw=${{ vars.RAW_BUCKET }} S3BucketStage=${{ vars.STAGE_BUCKET }}
                        --resolve-image-repos
                        --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM 
                        --region ${{ vars.AWS_REGION }}